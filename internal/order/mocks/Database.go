// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/wellywell/bonusy/internal/types"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// GetUnprocessedOrders provides a mock function with given fields: ctx, startID, limit
func (_m *Database) GetUnprocessedOrders(ctx context.Context, startID int, limit int) ([]types.OrderRecord, error) {
	ret := _m.Called(ctx, startID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUnprocessedOrders")
	}

	var r0 []types.OrderRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]types.OrderRecord, error)); ok {
		return rf(ctx, startID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []types.OrderRecord); ok {
		r0 = rf(ctx, startID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OrderRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, startID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetUnprocessedOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnprocessedOrders'
type Database_GetUnprocessedOrders_Call struct {
	*mock.Call
}

// GetUnprocessedOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - startID int
//   - limit int
func (_e *Database_Expecter) GetUnprocessedOrders(ctx interface{}, startID interface{}, limit interface{}) *Database_GetUnprocessedOrders_Call {
	return &Database_GetUnprocessedOrders_Call{Call: _e.mock.On("GetUnprocessedOrders", ctx, startID, limit)}
}

func (_c *Database_GetUnprocessedOrders_Call) Run(run func(ctx context.Context, startID int, limit int)) *Database_GetUnprocessedOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Database_GetUnprocessedOrders_Call) Return(_a0 []types.OrderRecord, _a1 error) *Database_GetUnprocessedOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetUnprocessedOrders_Call) RunAndReturn(run func(context.Context, int, int) ([]types.OrderRecord, error)) *Database_GetUnprocessedOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: ctx, orderID, newStatus, accrual
func (_m *Database) UpdateOrder(ctx context.Context, orderID int, newStatus types.Status, accrual int) error {
	ret := _m.Called(ctx, orderID, newStatus, accrual)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, types.Status, int) error); ok {
		r0 = rf(ctx, orderID, newStatus, accrual)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type Database_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int
//   - newStatus types.Status
//   - accrual int
func (_e *Database_Expecter) UpdateOrder(ctx interface{}, orderID interface{}, newStatus interface{}, accrual interface{}) *Database_UpdateOrder_Call {
	return &Database_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, orderID, newStatus, accrual)}
}

func (_c *Database_UpdateOrder_Call) Run(run func(ctx context.Context, orderID int, newStatus types.Status, accrual int)) *Database_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(types.Status), args[3].(int))
	})
	return _c
}

func (_c *Database_UpdateOrder_Call) Return(_a0 error) *Database_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateOrder_Call) RunAndReturn(run func(context.Context, int, types.Status, int) error) *Database_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
