// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	accrual "github.com/wellywell/bonusy/internal/accrual"
)

// AccrualClient is an autogenerated mock type for the AccrualClient type
type AccrualClient struct {
	mock.Mock
}

type AccrualClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AccrualClient) EXPECT() *AccrualClient_Expecter {
	return &AccrualClient_Expecter{mock: &_m.Mock}
}

// GetOrderStatus provides a mock function with given fields: orderNum
func (_m *AccrualClient) GetOrderStatus(orderNum string) (*accrual.OrderStatus, error) {
	ret := _m.Called(orderNum)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 *accrual.OrderStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*accrual.OrderStatus, error)); ok {
		return rf(orderNum)
	}
	if rf, ok := ret.Get(0).(func(string) *accrual.OrderStatus); ok {
		r0 = rf(orderNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accrual.OrderStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccrualClient_GetOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderStatus'
type AccrualClient_GetOrderStatus_Call struct {
	*mock.Call
}

// GetOrderStatus is a helper method to define mock.On call
//   - orderNum string
func (_e *AccrualClient_Expecter) GetOrderStatus(orderNum interface{}) *AccrualClient_GetOrderStatus_Call {
	return &AccrualClient_GetOrderStatus_Call{Call: _e.mock.On("GetOrderStatus", orderNum)}
}

func (_c *AccrualClient_GetOrderStatus_Call) Run(run func(orderNum string)) *AccrualClient_GetOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccrualClient_GetOrderStatus_Call) Return(_a0 *accrual.OrderStatus, _a1 error) *AccrualClient_GetOrderStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccrualClient_GetOrderStatus_Call) RunAndReturn(run func(string) (*accrual.OrderStatus, error)) *AccrualClient_GetOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccrualClient creates a new instance of AccrualClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrualClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccrualClient {
	mock := &AccrualClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
